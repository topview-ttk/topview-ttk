syntax = "proto3";

package user;
option go_package = "./user";


message UserInfo{
  int64 id = 1;
  string ttk_id = 2;
  string nick_name = 5;
  int32 gender = 8;
  string birthdate = 9;
  string avatar_path = 10;
  string bio = 11;
  string country = 12;
  string city = 13;
  string email = 14;
  string phone = 15;
  int32 account_status = 16;
}

message Page{
  uint32 current_page = 1;
  uint32 page_size = 2;
}

message GetUserInfoByUidRequest {
  int64 uid = 1;
}

message GetUserInfoByTTKIdRequest {
  string ttk_id = 1;
}

message GetUserInfoResponse {
  UserInfo user_info = 1;
}

// TODO: 根据当前是否关注或者互关进行优先级排序
message GetUserInfoListByRangeNameRequest {
  string range_name =1;
  Page page = 2;
}

message GetUserInfoListByRangeNameResponse {
  repeated UserInfo user_info_list = 1;
}

service UserService {
  rpc GetUserInfoByUid(GetUserInfoByUidRequest)returns (GetUserInfoResponse);
  rpc GetUserInfoByTTKId(GetUserInfoByTTKIdRequest) returns (GetUserInfoResponse);
  rpc GetUserSelfInfo(GetUserInfoByUidRequest)returns (GetUserInfoResponse);

  rpc GetUserInfoListByRangeName(GetUserInfoListByRangeNameRequest) returns (GetUserInfoListByRangeNameResponse);
}

// 发送验证码=====
// 发送手机验证码
message SendPhoneVerificationCodeRequest {
  string phone = 1;
  ClientInfo clientInfo = 2;
}

// 发送邮箱验证码
message SendEmailVerificationCodeRequest {
  string email = 1;
  ClientInfo clientInfo = 2;
}

// 发送验证码响应
message SendVerificationCodeResponse {
}
// 发送验证码=====



// 登录=====
message ClientInfo {
  string device_info = 1;
  string osInfo = 2;
  string clientVersion = 3;
  string loginIp = 4;
}

message StandbyUserInfo {
  string thirdPartyId = 1;
  string nickname = 2;
  string avatarUrl = 3;
  string email = 4;
}

// 手机验证码登录
message PhoneVerifyCodeLoginRequest {
  string phone = 1;
  string verification_code = 2;
  ClientInfo clientInfo = 3;
}

// 邮箱验证码登录
message EmailVerifyCodeLoginRequest {
  string email = 1;
  string verification_code = 2;
  ClientInfo clientInfo = 3;
}

// 手机密码登录
message PhonePassLoginRequest {
  string phone = 1;
  string pass = 2;
  ClientInfo clientInfo = 3;

}

// 邮箱登录
message EmailPassLoginRequest {
  string email = 1;
  string pass = 2;
  ClientInfo clientInfo = 3;
}

// ttkId登录
message TTKIdPassLoginRequest {
  string ttk_id = 1;
  string pass = 2;
  ClientInfo clientInfo = 3;
}


// 第三方登录
message ThirdPartyLoginRequest {
  string access_token = 1;
  // 设备信息
  ClientInfo clientInfo = 3;
}

// 第三方登录备用接口
message StandbyLoginRequest {
  StandbyUserInfo standbyInfo = 1;
  ClientInfo clientInfo = 2;
}



// 登录响应
message LoginResponse {
  int64 uid = 1;
}
// 登录==========


// 注册==========
// 邮箱注册
message EmailRegisterRequest {
  string nick_name = 1;
  string email = 2;
  string password = 3;
}

// 手机号注册
message PhoneRegisterRequest {
  string nick_name = 1;
  string phone = 2;
  string password = 3;
}

// 注册响应
message RegisterResponse {
}
// 注册==========

message RefreshTokenRequest{
  string token = 1;
  ClientInfo clientInfo = 2;
}

message RefreshTokenResponse{
  string ref_token = 1;
}


service SsoService{
  // 发送验证码
  rpc SendPhoneVerificationCode(SendPhoneVerificationCodeRequest) returns (SendVerificationCodeResponse);
  rpc SendEmailVerificationCode(SendEmailVerificationCodeRequest) returns (SendVerificationCodeResponse);

  // 登录
  rpc PhoneVerifyCodeLogin(PhoneVerifyCodeLoginRequest) returns (LoginResponse);
  rpc EmailVerifyCodeLogin(EmailVerifyCodeLoginRequest) returns (LoginResponse);
  rpc PhonePassLogin(PhonePassLoginRequest) returns(LoginResponse);
  rpc TTKIdPassLogin(TTKIdPassLoginRequest) returns (LoginResponse);
  rpc EmailPassLogin(EmailPassLoginRequest) returns (LoginResponse);
  rpc GoogleLogin(ThirdPartyLoginRequest) returns (LoginResponse);
  rpc FacebookLogin(ThirdPartyLoginRequest) returns (LoginResponse);
  rpc GithubLogin(ThirdPartyLoginRequest) returns (LoginResponse);
  rpc StandbyGoogleLogin(StandbyLoginRequest) returns (LoginResponse);
  rpc StandbyFacebookLogin(StandbyLoginRequest) returns (LoginResponse);

  // 注册
  rpc EmailRegister(EmailRegisterRequest) returns (RegisterResponse);
  rpc PhoneRegister(PhoneRegisterRequest) returns (RegisterResponse);

  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
}

