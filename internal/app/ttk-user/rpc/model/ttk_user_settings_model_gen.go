// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkUserSettingsFieldNames          = builder.RawFieldNames(&TtkUserSettings{})
	ttkUserSettingsRows                = strings.Join(ttkUserSettingsFieldNames, ",")
	ttkUserSettingsRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkUserSettingsFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), ",")
	ttkUserSettingsRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkUserSettingsFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), "=?,") + "=?"

	cacheTtkUserSettingsIdPrefix = "cache:ttkUserSettings:id:"
)

type (
	ttkUserSettingsModel interface {
		Insert(ctx context.Context, data *TtkUserSettings) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkUserSettings, error)
		Update(ctx context.Context, data *TtkUserSettings) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkUserSettingsModel struct {
		sqlc.CachedConn
		table string
	}

	TtkUserSettings struct {
		Id                      int64          `db:"id"` // 设置ID
		UserId                  sql.NullInt64  `db:"user_id"`
		NotificationPreferences sql.NullString `db:"notification_preferences"` // 通知首选项（以JSON格式存储）
		PrivacySettings         sql.NullString `db:"privacy_settings"`         // 隐私设置（以JSON格式存储）
		CreatedAt               time.Time      `db:"created_at"`               // 创建时间
		UpdatedAt               time.Time      `db:"updated_at"`               // 更新时间
		DeletedAt               sql.NullTime   `db:"deleted_at"`               // 删除时间
	}
)

func newTtkUserSettingsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkUserSettingsModel {
	return &defaultTtkUserSettingsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_user_settings`",
	}
}

func (m *defaultTtkUserSettingsModel) withSession(session sqlx.Session) *defaultTtkUserSettingsModel {
	return &defaultTtkUserSettingsModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_user_settings`",
	}
}

func (m *defaultTtkUserSettingsModel) Delete(ctx context.Context, id int64) error {
	ttkUserSettingsIdKey := fmt.Sprintf("%s%v", cacheTtkUserSettingsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkUserSettingsIdKey)
	return err
}

func (m *defaultTtkUserSettingsModel) FindOne(ctx context.Context, id int64) (*TtkUserSettings, error) {
	ttkUserSettingsIdKey := fmt.Sprintf("%s%v", cacheTtkUserSettingsIdPrefix, id)
	var resp TtkUserSettings
	err := m.QueryRowCtx(ctx, &resp, ttkUserSettingsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserSettingsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkUserSettingsModel) Insert(ctx context.Context, data *TtkUserSettings) (sql.Result, error) {
	ttkUserSettingsIdKey := fmt.Sprintf("%s%v", cacheTtkUserSettingsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, ttkUserSettingsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.NotificationPreferences, data.PrivacySettings, data.UpdatedAt, data.DeletedAt)
	}, ttkUserSettingsIdKey)
	return ret, err
}

func (m *defaultTtkUserSettingsModel) Update(ctx context.Context, data *TtkUserSettings) error {
	ttkUserSettingsIdKey := fmt.Sprintf("%s%v", cacheTtkUserSettingsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkUserSettingsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.NotificationPreferences, data.PrivacySettings, data.UpdatedAt, data.DeletedAt, data.Id)
	}, ttkUserSettingsIdKey)
	return err
}

func (m *defaultTtkUserSettingsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkUserSettingsIdPrefix, primary)
}

func (m *defaultTtkUserSettingsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserSettingsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkUserSettingsModel) tableName() string {
	return m.table
}
