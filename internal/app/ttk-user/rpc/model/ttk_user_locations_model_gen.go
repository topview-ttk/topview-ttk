// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkUserLocationsFieldNames          = builder.RawFieldNames(&TtkUserLocations{})
	ttkUserLocationsRows                = strings.Join(ttkUserLocationsFieldNames, ",")
	ttkUserLocationsRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkUserLocationsFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), ",")
	ttkUserLocationsRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkUserLocationsFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), "=?,") + "=?"

	cacheTtkUserLocationsIdPrefix = "cache:ttkUserLocations:id:"
)

type (
	ttkUserLocationsModel interface {
		Insert(ctx context.Context, data *TtkUserLocations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkUserLocations, error)
		Update(ctx context.Context, data *TtkUserLocations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkUserLocationsModel struct {
		sqlc.CachedConn
		table string
	}

	TtkUserLocations struct {
		Id           int64           `db:"id"` // 地理位置ID
		UserId       sql.NullInt64   `db:"user_id"`
		Latitude     sql.NullFloat64 `db:"latitude"`      // 纬度
		Longitude    sql.NullFloat64 `db:"longitude"`     // 经度
		LocationName sql.NullString  `db:"location_name"` // 位置名称
		CreatedAt    time.Time       `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time       `db:"updated_at"`    // 更新时间
		DeletedAt    sql.NullTime    `db:"deleted_at"`    // 删除时间
	}
)

func newTtkUserLocationsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkUserLocationsModel {
	return &defaultTtkUserLocationsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_user_locations`",
	}
}

func (m *defaultTtkUserLocationsModel) withSession(session sqlx.Session) *defaultTtkUserLocationsModel {
	return &defaultTtkUserLocationsModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_user_locations`",
	}
}

func (m *defaultTtkUserLocationsModel) Delete(ctx context.Context, id int64) error {
	ttkUserLocationsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLocationsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkUserLocationsIdKey)
	return err
}

func (m *defaultTtkUserLocationsModel) FindOne(ctx context.Context, id int64) (*TtkUserLocations, error) {
	ttkUserLocationsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLocationsIdPrefix, id)
	var resp TtkUserLocations
	err := m.QueryRowCtx(ctx, &resp, ttkUserLocationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserLocationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkUserLocationsModel) Insert(ctx context.Context, data *TtkUserLocations) (sql.Result, error) {
	ttkUserLocationsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLocationsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, ttkUserLocationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Latitude, data.Longitude, data.LocationName)
	}, ttkUserLocationsIdKey)
	return ret, err
}

func (m *defaultTtkUserLocationsModel) Update(ctx context.Context, data *TtkUserLocations) error {
	ttkUserLocationsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLocationsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkUserLocationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Latitude, data.Longitude, data.LocationName, data.Id)
	}, ttkUserLocationsIdKey)
	return err
}

func (m *defaultTtkUserLocationsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkUserLocationsIdPrefix, primary)
}

func (m *defaultTtkUserLocationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserLocationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkUserLocationsModel) tableName() string {
	return m.table
}
