// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkThirdPartyBindingFieldNames          = builder.RawFieldNames(&TtkThirdPartyBinding{})
	ttkThirdPartyBindingRows                = strings.Join(ttkThirdPartyBindingFieldNames, ",")
	ttkThirdPartyBindingRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkThirdPartyBindingFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), ",")
	ttkThirdPartyBindingRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkThirdPartyBindingFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), "=?,") + "=?"

	cacheTtkThirdPartyBindingIdPrefix = "cache:ttkThirdPartyBinding:id:"
)

type (
	ttkThirdPartyBindingModel interface {
		Insert(ctx context.Context, data *TtkThirdPartyBinding) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkThirdPartyBinding, error)
		Update(ctx context.Context, data *TtkThirdPartyBinding) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkThirdPartyBindingModel struct {
		sqlc.CachedConn
		table string
	}

	TtkThirdPartyBinding struct {
		Id                    int64          `db:"id"` // 第三方登录绑定ID
		UserId                sql.NullInt64  `db:"user_id"`
		ThirdPartyBindingType sql.NullString `db:"third_party_binding_type"` // 第三方登录类型
		ThirdPartyId          sql.NullString `db:"third_party_id"`           // 第三方登录ID
		CreatedAt             time.Time      `db:"created_at"`               // 创建时间
		UpdatedAt             time.Time      `db:"updated_at"`               // 更新时间
		DeletedAt             sql.NullTime   `db:"deleted_at"`               // 删除时间
	}
)

func newTtkThirdPartyBindingModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkThirdPartyBindingModel {
	return &defaultTtkThirdPartyBindingModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_third_party_binding`",
	}
}

func (m *defaultTtkThirdPartyBindingModel) withSession(session sqlx.Session) *defaultTtkThirdPartyBindingModel {
	return &defaultTtkThirdPartyBindingModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_third_party_binding`",
	}
}

func (m *defaultTtkThirdPartyBindingModel) Delete(ctx context.Context, id int64) error {
	ttkThirdPartyBindingIdKey := fmt.Sprintf("%s%v", cacheTtkThirdPartyBindingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkThirdPartyBindingIdKey)
	return err
}

func (m *defaultTtkThirdPartyBindingModel) FindOne(ctx context.Context, id int64) (*TtkThirdPartyBinding, error) {
	ttkThirdPartyBindingIdKey := fmt.Sprintf("%s%v", cacheTtkThirdPartyBindingIdPrefix, id)
	var resp TtkThirdPartyBinding
	err := m.QueryRowCtx(ctx, &resp, ttkThirdPartyBindingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkThirdPartyBindingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkThirdPartyBindingModel) Insert(ctx context.Context, data *TtkThirdPartyBinding) (sql.Result, error) {
	ttkThirdPartyBindingIdKey := fmt.Sprintf("%s%v", cacheTtkThirdPartyBindingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, ttkThirdPartyBindingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ThirdPartyBindingType, data.ThirdPartyId)
	}, ttkThirdPartyBindingIdKey)
	return ret, err
}

func (m *defaultTtkThirdPartyBindingModel) Update(ctx context.Context, data *TtkThirdPartyBinding) error {
	ttkThirdPartyBindingIdKey := fmt.Sprintf("%s%v", cacheTtkThirdPartyBindingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkThirdPartyBindingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ThirdPartyBindingType, data.ThirdPartyId, data.Id)
	}, ttkThirdPartyBindingIdKey)
	return err
}

func (m *defaultTtkThirdPartyBindingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkThirdPartyBindingIdPrefix, primary)
}

func (m *defaultTtkThirdPartyBindingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkThirdPartyBindingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkThirdPartyBindingModel) tableName() string {
	return m.table
}
