// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkLoginStatusFieldNames          = builder.RawFieldNames(&TtkLoginStatus{})
	ttkLoginStatusRows                = strings.Join(ttkLoginStatusFieldNames, ",")
	ttkLoginStatusRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkLoginStatusFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), ",")
	ttkLoginStatusRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkLoginStatusFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), "=?,") + "=?"

	cacheTtkLoginStatusIdPrefix = "cache:ttkLoginStatus:id:"
)

type (
	ttkLoginStatusModel interface {
		Insert(ctx context.Context, data *TtkLoginStatus) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkLoginStatus, error)
		Update(ctx context.Context, data *TtkLoginStatus) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkLoginStatusModel struct {
		sqlc.CachedConn
		table string
	}

	TtkLoginStatus struct {
		Id                    int64          `db:"id"`                       // 登录状态ID (主键)
		UserId                int64          `db:"user_id"`                  // 用户ID (外键关联到ttk_user表)
		AccessToken           string         `db:"access_token"`             // 访问令牌 (用于验证登录状态)
		ExpiresAt             time.Time      `db:"expires_at"`               // 过期时间 (登录状态的有效期)
		LoginMethod           string         `db:"login_method"`             // 登录方式 (邮箱、手机号、第三方登录)
		ThirdPartyType        sql.NullString `db:"third_party_type"`         // 第三方登录类型 (仅当登录方式为ThirdParty时使用)
		ThirdPartyAccessToken sql.NullString `db:"third_party_access_token"` // 第三方登录访问令牌 (仅当登录方式为ThirdParty时使用)
		CreatedAt             time.Time      `db:"created_at"`               // 创建时间
		UpdatedAt             time.Time      `db:"updated_at"`               // 更新时间
		DeletedAt             sql.NullTime   `db:"deleted_at"`               // 删除时间
	}
)

func newTtkLoginStatusModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkLoginStatusModel {
	return &defaultTtkLoginStatusModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_login_status`",
	}
}

func (m *defaultTtkLoginStatusModel) withSession(session sqlx.Session) *defaultTtkLoginStatusModel {
	return &defaultTtkLoginStatusModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_login_status`",
	}
}

func (m *defaultTtkLoginStatusModel) Delete(ctx context.Context, id int64) error {
	ttkLoginStatusIdKey := fmt.Sprintf("%s%v", cacheTtkLoginStatusIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkLoginStatusIdKey)
	return err
}

func (m *defaultTtkLoginStatusModel) FindOne(ctx context.Context, id int64) (*TtkLoginStatus, error) {
	ttkLoginStatusIdKey := fmt.Sprintf("%s%v", cacheTtkLoginStatusIdPrefix, id)
	var resp TtkLoginStatus
	err := m.QueryRowCtx(ctx, &resp, ttkLoginStatusIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkLoginStatusRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkLoginStatusModel) Insert(ctx context.Context, data *TtkLoginStatus) (sql.Result, error) {
	ttkLoginStatusIdKey := fmt.Sprintf("%s%v", cacheTtkLoginStatusIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, ttkLoginStatusRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.AccessToken, data.ExpiresAt, data.LoginMethod, data.ThirdPartyType, data.ThirdPartyAccessToken)
	}, ttkLoginStatusIdKey)
	return ret, err
}

func (m *defaultTtkLoginStatusModel) Update(ctx context.Context, data *TtkLoginStatus) error {
	ttkLoginStatusIdKey := fmt.Sprintf("%s%v", cacheTtkLoginStatusIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkLoginStatusRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.AccessToken, data.ExpiresAt, data.LoginMethod, data.ThirdPartyType, data.ThirdPartyAccessToken, data.Id)
	}, ttkLoginStatusIdKey)
	return err
}

func (m *defaultTtkLoginStatusModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkLoginStatusIdPrefix, primary)
}

func (m *defaultTtkLoginStatusModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkLoginStatusRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkLoginStatusModel) tableName() string {
	return m.table
}
