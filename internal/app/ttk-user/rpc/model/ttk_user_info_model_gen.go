// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkUserInfoFieldNames          = builder.RawFieldNames(&TtkUserInfo{})
	ttkUserInfoRows                = strings.Join(ttkUserInfoFieldNames, ",")
	ttkUserInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkUserInfoFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), ",")
	ttkUserInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkUserInfoFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), "=?,") + "=?"

	cacheTtkUserInfoIdPrefix    = "cache:ttkUserInfo:id:"
	cacheTtkUserInfoTtkIdPrefix = "cache:ttkUserInfo:ttkId:"
)

type (
	ttkUserInfoModel interface {
		Insert(ctx context.Context, data *TtkUserInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkUserInfo, error)
		FindOneByTtkId(ctx context.Context, ttkId string) (*TtkUserInfo, error)
		Update(ctx context.Context, data *TtkUserInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkUserInfoModel struct {
		sqlc.CachedConn
		table string
	}

	TtkUserInfo struct {
		Id                  int64          `db:"id"`                    // 用户ID (主键)
		TtkId               string         `db:"ttk_id"`                // 用户名（唯一）
		Password            string         `db:"password"`              // 密码（加密存储）
		NickName            sql.NullString `db:"nick_name"`             // 昵称（可修改,用于显示和@提及）
		RealName            sql.NullString `db:"real_name"`             // 真实姓名（实名认证）
		IdCard              sql.NullString `db:"id_card"`               // 身份证ID （实名认证）
		Gender              sql.NullString `db:"gender"`                // 性别
		Birthdate           sql.NullTime   `db:"birthdate"`             // 生日
		AvatarPath          sql.NullString `db:"avatar_path"`           // 头像路径（存储在对象存储中，如S3）
		Bio                 sql.NullString `db:"bio"`                   // 个人简介
		Country             sql.NullString `db:"country"`               // 国家/地区
		City                sql.NullString `db:"city"`                  // 城市
		Followers           int64          `db:"followers"`             // 关注数
		Following           int64          `db:"following"`             // 粉丝数
		Videos              int64          `db:"videos"`                // 视频数
		PrivateAccount      bool           `db:"private_account"`       // 私密账号设置（公开、仅好友可见、私密等）
		PushNotifications   bool           `db:"push_notifications"`    // 推送通知设置（点赞、评论、关注等通知）
		Email               sql.NullString `db:"email"`                 // 邮箱
		Phone               sql.NullString `db:"phone"`                 // 手机号
		VerificationStatus  sql.NullString `db:"verification_status"`   // 验证状态（已验证、未验证）
		AccountStatus       sql.NullString `db:"account_status"`        // 账号状态（正常、封禁、限制等）
		RegistrationSource  sql.NullString `db:"registration_source"`   // 注册来源（iOS App、Android App、Web等）
		RegistrationIp      sql.NullString `db:"registration_ip"`       // 注册IP地址
		LastActive          sql.NullTime   `db:"last_active"`           // 最近活跃时间
		WalletBalance       float64        `db:"wallet_balance"`        // 钱包余额
		MessagingPermission sql.NullString `db:"messaging_permission"`  // 私信权限设置
		TfaEnable           int64          `db:"tfa_enable"`            // 是否启用双因素认证
		SocialActivityScore int64          `db:"social_activity_score"` // 社交活跃度分析
		CreatedAt           time.Time      `db:"created_at"`            // 创建时间
		UpdatedAt           time.Time      `db:"updated_at"`            // 更新时间
		DeletedAt           sql.NullTime   `db:"deleted_at"`            // 删除时间
	}
)

func newTtkUserInfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkUserInfoModel {
	return &defaultTtkUserInfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_user_info`",
	}
}

func (m *defaultTtkUserInfoModel) withSession(session sqlx.Session) *defaultTtkUserInfoModel {
	return &defaultTtkUserInfoModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_user_info`",
	}
}

func (m *defaultTtkUserInfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	ttkUserInfoIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoIdPrefix, id)
	ttkUserInfoTtkIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoTtkIdPrefix, data.TtkId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkUserInfoIdKey, ttkUserInfoTtkIdKey)
	return err
}

func (m *defaultTtkUserInfoModel) FindOne(ctx context.Context, id int64) (*TtkUserInfo, error) {
	ttkUserInfoIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoIdPrefix, id)
	var resp TtkUserInfo
	err := m.QueryRowCtx(ctx, &resp, ttkUserInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkUserInfoModel) FindOneByTtkId(ctx context.Context, ttkId string) (*TtkUserInfo, error) {
	ttkUserInfoTtkIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoTtkIdPrefix, ttkId)
	var resp TtkUserInfo
	err := m.QueryRowIndexCtx(ctx, &resp, ttkUserInfoTtkIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `ttk_id` = ? limit 1", ttkUserInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, ttkId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkUserInfoModel) Insert(ctx context.Context, data *TtkUserInfo) (sql.Result, error) {
	ttkUserInfoIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoIdPrefix, data.Id)
	ttkUserInfoTtkIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoTtkIdPrefix, data.TtkId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ttkUserInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TtkId, data.Password, data.NickName, data.RealName, data.IdCard, data.Gender, data.Birthdate, data.AvatarPath, data.Bio, data.Country, data.City, data.Followers, data.Following, data.Videos, data.PrivateAccount, data.PushNotifications, data.Email, data.Phone, data.VerificationStatus, data.AccountStatus, data.RegistrationSource, data.RegistrationIp, data.LastActive, data.WalletBalance, data.MessagingPermission, data.TfaEnable, data.SocialActivityScore, data.UpdatedAt, data.DeletedAt)
	}, ttkUserInfoIdKey, ttkUserInfoTtkIdKey)
	return ret, err
}

func (m *defaultTtkUserInfoModel) Update(ctx context.Context, newData *TtkUserInfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	ttkUserInfoIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoIdPrefix, data.Id)
	ttkUserInfoTtkIdKey := fmt.Sprintf("%s%v", cacheTtkUserInfoTtkIdPrefix, data.TtkId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkUserInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.TtkId, newData.Password, newData.NickName, newData.RealName, newData.IdCard, newData.Gender, newData.Birthdate, newData.AvatarPath, newData.Bio, newData.Country, newData.City, newData.Followers, newData.Following, newData.Videos, newData.PrivateAccount, newData.PushNotifications, newData.Email, newData.Phone, newData.VerificationStatus, newData.AccountStatus, newData.RegistrationSource, newData.RegistrationIp, newData.LastActive, newData.WalletBalance, newData.MessagingPermission, newData.TfaEnable, newData.SocialActivityScore, newData.UpdatedAt, newData.DeletedAt, newData.Id)
	}, ttkUserInfoIdKey, ttkUserInfoTtkIdKey)
	return err
}

func (m *defaultTtkUserInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkUserInfoIdPrefix, primary)
}

func (m *defaultTtkUserInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkUserInfoModel) tableName() string {
	return m.table
}
