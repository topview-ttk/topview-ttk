// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkUserStatisticsFieldNames          = builder.RawFieldNames(&TtkUserStatistics{})
	ttkUserStatisticsRows                = strings.Join(ttkUserStatisticsFieldNames, ",")
	ttkUserStatisticsRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkUserStatisticsFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), ",")
	ttkUserStatisticsRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkUserStatisticsFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), "=?,") + "=?"

	cacheTtkUserStatisticsIdPrefix = "cache:ttkUserStatistics:id:"
)

type (
	ttkUserStatisticsModel interface {
		Insert(ctx context.Context, data *TtkUserStatistics) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkUserStatistics, error)
		Update(ctx context.Context, data *TtkUserStatistics) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkUserStatisticsModel struct {
		sqlc.CachedConn
		table string
	}

	TtkUserStatistics struct {
		Id            int64         `db:"id"` // 统计ID
		UserId        sql.NullInt64 `db:"user_id"`
		PostsCount    int64         `db:"posts_count"`    // 发表的帖子数量
		CommentsCount int64         `db:"comments_count"` // 发表的评论数量
		LikesCount    int64         `db:"likes_count"`    // 获得的点赞数
		CreatedAt     time.Time     `db:"created_at"`     // 创建时间
		UpdatedAt     time.Time     `db:"updated_at"`     // 更新时间
		DeletedAt     sql.NullTime  `db:"deleted_at"`     // 删除时间
	}
)

func newTtkUserStatisticsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkUserStatisticsModel {
	return &defaultTtkUserStatisticsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_user_statistics`",
	}
}

func (m *defaultTtkUserStatisticsModel) withSession(session sqlx.Session) *defaultTtkUserStatisticsModel {
	return &defaultTtkUserStatisticsModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_user_statistics`",
	}
}

func (m *defaultTtkUserStatisticsModel) Delete(ctx context.Context, id int64) error {
	ttkUserStatisticsIdKey := fmt.Sprintf("%s%v", cacheTtkUserStatisticsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkUserStatisticsIdKey)
	return err
}

func (m *defaultTtkUserStatisticsModel) FindOne(ctx context.Context, id int64) (*TtkUserStatistics, error) {
	ttkUserStatisticsIdKey := fmt.Sprintf("%s%v", cacheTtkUserStatisticsIdPrefix, id)
	var resp TtkUserStatistics
	err := m.QueryRowCtx(ctx, &resp, ttkUserStatisticsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserStatisticsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkUserStatisticsModel) Insert(ctx context.Context, data *TtkUserStatistics) (sql.Result, error) {
	ttkUserStatisticsIdKey := fmt.Sprintf("%s%v", cacheTtkUserStatisticsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, ttkUserStatisticsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.PostsCount, data.CommentsCount, data.LikesCount, data.UpdatedAt, data.DeletedAt)
	}, ttkUserStatisticsIdKey)
	return ret, err
}

func (m *defaultTtkUserStatisticsModel) Update(ctx context.Context, data *TtkUserStatistics) error {
	ttkUserStatisticsIdKey := fmt.Sprintf("%s%v", cacheTtkUserStatisticsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkUserStatisticsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.PostsCount, data.CommentsCount, data.LikesCount, data.UpdatedAt, data.DeletedAt, data.Id)
	}, ttkUserStatisticsIdKey)
	return err
}

func (m *defaultTtkUserStatisticsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkUserStatisticsIdPrefix, primary)
}

func (m *defaultTtkUserStatisticsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserStatisticsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkUserStatisticsModel) tableName() string {
	return m.table
}
