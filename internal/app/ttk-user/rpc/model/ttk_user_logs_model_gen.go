// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkUserLogsFieldNames          = builder.RawFieldNames(&TtkUserLogs{})
	ttkUserLogsRows                = strings.Join(ttkUserLogsFieldNames, ",")
	ttkUserLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkUserLogsFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), ",")
	ttkUserLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkUserLogsFieldNames, "`id`", "`create_at`", "`created_at`", "`delete_at`", "`update_at`"), "=?,") + "=?"

	cacheTtkUserLogsIdPrefix = "cache:ttkUserLogs:id:"
)

type (
	ttkUserLogsModel interface {
		Insert(ctx context.Context, data *TtkUserLogs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkUserLogs, error)
		Update(ctx context.Context, data *TtkUserLogs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkUserLogsModel struct {
		sqlc.CachedConn
		table string
	}

	TtkUserLogs struct {
		Id         int64          `db:"id"` // 日志ID
		UserId     sql.NullInt64  `db:"user_id"`
		LogType    sql.NullString `db:"log_type"`    // 日志类型
		LogDetails sql.NullString `db:"log_details"` // 日志详情（以JSON格式存储）
		Timestamp  sql.NullTime   `db:"timestamp"`   // 时间戳
		CreatedAt  time.Time      `db:"created_at"`  // 创建时间
		UpdatedAt  time.Time      `db:"updated_at"`  // 更新时间
		DeletedAt  sql.NullTime   `db:"deleted_at"`  // 删除时间
	}
)

func newTtkUserLogsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkUserLogsModel {
	return &defaultTtkUserLogsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_user_logs`",
	}
}

func (m *defaultTtkUserLogsModel) withSession(session sqlx.Session) *defaultTtkUserLogsModel {
	return &defaultTtkUserLogsModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_user_logs`",
	}
}

func (m *defaultTtkUserLogsModel) Delete(ctx context.Context, id int64) error {
	ttkUserLogsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLogsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkUserLogsIdKey)
	return err
}

func (m *defaultTtkUserLogsModel) FindOne(ctx context.Context, id int64) (*TtkUserLogs, error) {
	ttkUserLogsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLogsIdPrefix, id)
	var resp TtkUserLogs
	err := m.QueryRowCtx(ctx, &resp, ttkUserLogsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserLogsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkUserLogsModel) Insert(ctx context.Context, data *TtkUserLogs) (sql.Result, error) {
	ttkUserLogsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLogsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, ttkUserLogsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.LogType, data.LogDetails, data.Timestamp, data.UpdatedAt, data.DeletedAt)
	}, ttkUserLogsIdKey)
	return ret, err
}

func (m *defaultTtkUserLogsModel) Update(ctx context.Context, data *TtkUserLogs) error {
	ttkUserLogsIdKey := fmt.Sprintf("%s%v", cacheTtkUserLogsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkUserLogsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.LogType, data.LogDetails, data.Timestamp, data.UpdatedAt, data.DeletedAt, data.Id)
	}, ttkUserLogsIdKey)
	return err
}

func (m *defaultTtkUserLogsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkUserLogsIdPrefix, primary)
}

func (m *defaultTtkUserLogsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkUserLogsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkUserLogsModel) tableName() string {
	return m.table
}
