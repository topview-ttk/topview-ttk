// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ttkAuthorizationFieldNames          = builder.RawFieldNames(&TtkAuthorization{})
	ttkAuthorizationRows                = strings.Join(ttkAuthorizationFieldNames, ",")
	ttkAuthorizationRowsExpectAutoSet   = strings.Join(stringx.Remove(ttkAuthorizationFieldNames, "`created_at`", "`deleted_at`", "`updated_at`"), ",")
	ttkAuthorizationRowsWithPlaceHolder = strings.Join(stringx.Remove(ttkAuthorizationFieldNames, "`id`", "`created_at`", "`deleted_at`", "`updated_at`"), "=?,") + "=?"

	cacheTtkAuthorizationIdPrefix = "cache:ttkAuthorization:id:"
)

type (
	ttkAuthorizationModel interface {
		Insert(ctx context.Context, data *TtkAuthorization) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TtkAuthorization, error)
		Update(ctx context.Context, data *TtkAuthorization) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTtkAuthorizationModel struct {
		sqlc.CachedConn
		table string
	}

	TtkAuthorization struct {
		Id                int64          `db:"id"` // 认证授权ID
		UserId            sql.NullInt64  `db:"user_id"`
		ClientId          sql.NullString `db:"client_id"`          // 客户端ID
		AuthorizationCode sql.NullString `db:"authorization_code"` // 授权码
		AccessToken       sql.NullString `db:"access_token"`       // 访问令牌
		RefreshToken      sql.NullString `db:"refresh_token"`      // 刷新令牌
		ExpiresAt         sql.NullTime   `db:"expires_at"`         // 过期时间
		CreatedAt         time.Time      `db:"created_at"`         // 创建时间
		UpdatedAt         time.Time      `db:"updated_at"`         // 更新时间
		DeletedAt         sql.NullTime   `db:"deleted_at"`         // 删除时间
	}
)

func newTtkAuthorizationModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTtkAuthorizationModel {
	return &defaultTtkAuthorizationModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ttk_authorization`",
	}
}

func (m *defaultTtkAuthorizationModel) withSession(session sqlx.Session) *defaultTtkAuthorizationModel {
	return &defaultTtkAuthorizationModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ttk_authorization`",
	}
}

func (m *defaultTtkAuthorizationModel) Delete(ctx context.Context, id int64) error {
	ttkAuthorizationIdKey := fmt.Sprintf("%s%v", cacheTtkAuthorizationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, ttkAuthorizationIdKey)
	return err
}

func (m *defaultTtkAuthorizationModel) FindOne(ctx context.Context, id int64) (*TtkAuthorization, error) {
	ttkAuthorizationIdKey := fmt.Sprintf("%s%v", cacheTtkAuthorizationIdPrefix, id)
	var resp TtkAuthorization
	err := m.QueryRowCtx(ctx, &resp, ttkAuthorizationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkAuthorizationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTtkAuthorizationModel) Insert(ctx context.Context, data *TtkAuthorization) (sql.Result, error) {
	ttkAuthorizationIdKey := fmt.Sprintf("%s%v", cacheTtkAuthorizationIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, ttkAuthorizationRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.ClientId, data.AuthorizationCode, data.AccessToken, data.RefreshToken, data.ExpiresAt)
	}, ttkAuthorizationIdKey)
	return ret, err
}

func (m *defaultTtkAuthorizationModel) Update(ctx context.Context, data *TtkAuthorization) error {
	ttkAuthorizationIdKey := fmt.Sprintf("%s%v", cacheTtkAuthorizationIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ttkAuthorizationRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.ClientId, data.AuthorizationCode, data.AccessToken, data.RefreshToken, data.ExpiresAt, data.Id)
	}, ttkAuthorizationIdKey)
	return err
}

func (m *defaultTtkAuthorizationModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTtkAuthorizationIdPrefix, primary)
}

func (m *defaultTtkAuthorizationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ttkAuthorizationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTtkAuthorizationModel) tableName() string {
	return m.table
}
